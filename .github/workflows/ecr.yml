name: ECR
on:
  push:
    branches:
      - main
env:
  AWS_REGION: ap-northeast-1
  ECS_CLUSTER: watanabe-cluster
  ECS_SERVICE: watanabe-services
  ECR_APP: watanabe-app
  ECR_WEB: watanabe-web
  TASK_DEFINITION: watanabe-task-definition

permissions:
  id-token: write 
  contents: read

jobs:
  # TEST
  # 
  # BUILD
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: src
    steps:
      - uses: actions/checkout@v4

      - name: Build app image
        run: docker image build -t temp_app_image:latest -f docker/common/php-fpm/Dockerfile .

      - name: Build web image
        run: docker image build -t temp_web_image:latest -f docker/production/nginx/Dockerfile .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Push images to Amazon ECR
        id: push-images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker image tag temp_app_image:latest $ECR_REGISTRY/$ECR_APP:$IMAGE_TAG
          docker image tag temp_web_image:latest $ECR_REGISTRY/$ECR_WEB:$IMAGE_TAG
          docker image push $ECR_REGISTRY/$ECR_APP:$IMAGE_TAG
          docker image push $ECR_REGISTRY/$ECR_WEB:$IMAGE_TAG
          echo "app_image=$ECR_REGISTRY/$ECR_APP:$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "web_image=$ECR_REGISTRY/$ECR_WEB:$IMAGE_TAG" >> $GITHUB_OUTPUT

    outputs:
      app_image: ${{ steps.push-images.outputs.app_image }}
      web_image: ${{ steps.push-images.outputs.web_image }}

  # DEPLOY
  # deploy:
  #   runs-on: ubuntu-latest
  #   needs: build
  #   steps:
  #     - name: Deploy to ECS
  #       uses: aws-actions/amazon-ecs-deploy-task-definition@v2
  #       with:
  #         task-definition: ${{ env.TASK_DEFINITION }}
  #         service: ${{ env.ECS_SERVICE }}
  #         cluster: ${{ env.ECS_CLUSTER }}
  #         wait-for-service-stability: true
  #         force-new-deployment: true
  #         container-name: ${{ env.ECR_APP }}
  #         image-uri: ${{ needs.build.outputs.app_image }}